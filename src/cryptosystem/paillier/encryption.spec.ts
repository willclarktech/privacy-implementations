import { decrypt, encrypt } from "./encryption";

describe("encrypt and decrypt", () => {
	const keyPair = {
		pub: {
			n: 3082590747758645826584711019243896234264130658780320940720087325644853110730797786455392835801839427681244995943424005893062006149651887486371365736732782430840646736887880059053413660245040493181423787268659709683684628227785310054627285574076836608558325763056132681933763109937440854939887852202363039161509804153704385743099654340738086054501273381950141820485663689887100087957649225630546300897663102905119045560757855398824019877231545749150518341947681201532048303422488418324445044716733245241697860989869093603603645915894434365102700578451844847320252556554500159356777292568307736069284377068841032996739229028722550188891727112295957564012876888811786792213067287528288667107137593838186183713346743446082538333008551570453397497482924777479706617270884415282982528460692727564538056382191911234772650747014898409682326741893750588185304937797469647600076274705604893179706017093692761655758031682717775011981459n,
			n2: 9502365718167207220135937089374746360614569129738901079105965357742364593319433804896256082843851206832460782812139460403967037203300348916119729488951789372568116231810967891773512215631369613970718410156771796754451853956460702670795085420768066364435213900585110750440445308099863838367617302617762536621296237019149258982820077299094306272668052764335341024973649490555742836807474158589960229717494353742635636002668859193196707348130014692562912320548873618194312230750598114943199760264523884437864168218678590257533201137799173454797840009852618740121048199669755501040026815109953493829650003331904464355821628155309428913228773927975243332083336014252190563385411133492638433326567296693731065975124364538888511193100814000163644457188454702945128416422559630470032184667773659266612711141798445179510109485550594099219942522232973136076608230228522460428741295782117493168277171869786495951969290153543562118757900283630997464961551765444957782679785018894813263388828497106175179302808396117129091790087815687615476994625799132849972303090037288950166654650440749307437045936310919915548062264635892083184970861174626325280597214739218726229297055023233152834951548910553917025398672750417520457859954660230694707666011106517148569614006209778463159705148084608629545817159890000979243844308276113904515262308625914220334119763650132781582372381230245897539729626286970691524398031605491849424001127517566171418278453639624684582000194306407943855253388447334377015241054186908857685107486006964023266886070758542565979904870056182887904559603582228082817769550766884300014673206322009252702761270928962692528240180384063601963591218102103491434692428651255210554554362331935304850098190300424264040812258348929753371368695716662602582877663446800302621558390315073609371131286266754858945609315168597156256084242004993059611005359768681n,
			g: 7733059215509209202993582201859177684019088653552685099285107917351541719555529172508993809717263335502306308607749425097783063749731184647858055790745895077750576895941800170300042187395762865473096476426661442715664498280903461952035159158917979473118455931633212711581218544266924984578160358111598703736826439805292352821743442935736506835305296950740652870456951769474763137341406471213787458243244755901299192225764307267690049994968442171795289919819627300726696713086342515588263744818562024845306557241840943665192647132712826581131895974058447198103370333177277991253587768217961043377249562673663559355107976679890703358575155844833217860916423612580924199646718164097799035994609493718793052208230457107207928260970502907991526163166606670423365579737851012672011494701351023432152714889454917268008321099322858967945093387604084023721917446391965389900525371764444418230792696909871540769007715617301558991442484213910459926910700335537041496787472736657424744956255987360975531540727594399213859122686508278461157361630942348294783538838737903035408232613641513463633922289355260811351770312159902554810341999753581179721599117082793008253983220118280855966046307202500457583677276890003842387999619709823430066114597298953213597618536302352064480578023774608416658741353172841215849188860365622999830394555930730680544375740163301840337658961548151459317789178959641798738673916548342987190297335919832053710741328176070441049464752881475427746829160135185033057661326913327302545813046283362054940907904919259169382598352363405054378138408750580660562308916651092753041739495834902182083266160833206820316963722489112720794512756776420659629917029095303890036465282908277571569914819020208386133327767644772456598171669251998188927104890863020900415018862490209384702685211572946810402768259159803460204676213362167873021754127236113n,
		},
		priv: {
			lambda: 513765124626440971097451836540649372377355109796720156786681220940808851788466297742565472633639904613540832657237334315510334358275314581061894289455463738473441122814646676508902276707506748863570631211443284947280771371297551675771214262346139434759720960509355446988960518322906809156647975367060506526918300692284064290516609056789681009083545563658356970080943948314516681326274870938424383482943850484186507593459642566470669979538590958191753056991280199668366642991793068154504089690632754272376404569095044584752027412643719816166514343094267477304437925090020184270402864202480979806219761651872072751171800587713294348253523513027577173546458262166811790188499290306973403511271807239000945325868885542039990120817724143022166278395200374041149873166300385921827375961272825393737833040315138091997842933948592406141921907852764476727206557041892557479717791760380600032930483707966449671249254411375459838417736n,
			mu: 1807383677763302086533069656392210677739860440767053451192077489946627688869935303160435432063599115389914114536955357071546580636218238742917349221093041830653190233046100387677114086268850892172411530885679494673539859191977199839066706710675286681130625821923200660998308143708014324837420839464093269747820039141560812923645468759838201358051890594470672014674002113692016425447216368293722188236344433559151736443832766885388486762373559750448151798276615268914881199601094619351966280708342706420455090491221405060480503464814547688275739414986561926687319957356473846348528508150802453844990655907351720972692204819963211387302204045700223696191937569774629330692353507384048567146265703680859454374977381286648227545778830220257688610679027513585915509543493150714780899777100846506924406866062506476061334549121827385286479738100246456869885248935583928735184613288351067313278738460258092176601159774405004879014291n,
		},
	};
	const plainText = 19134702400093278081449423917n;
	const alternativePlainText = 19134702400093278081449423916n;

	it("encrypts a plain text", () => {
		const cipherText = encrypt(keyPair.pub)(plainText);
		expect(cipherText).not.toStrictEqual(plainText);
	});

	it("encrypts a plain text differently each time", () => {
		const cipherText1 = encrypt(keyPair.pub)(plainText);
		const cipherText2 = encrypt(keyPair.pub)(plainText);
		expect(cipherText1).not.toStrictEqual(cipherText2);
	});

	it("encrypts two different plain texts differently", () => {
		const cipherText1 = encrypt(keyPair.pub)(plainText);
		const cipherText2 = encrypt(keyPair.pub)(alternativePlainText);
		expect(cipherText1).not.toStrictEqual(cipherText2);
	});

	it("encrypts a plain text and decrypts to the original", () => {
		const cipherText = encrypt(keyPair.pub)(plainText);
		const decrypted = decrypt(keyPair)(cipherText);
		expect(decrypted).toStrictEqual(plainText);
	});
});
